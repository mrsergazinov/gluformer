dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals)
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=150)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=150)
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=500)
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=500)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=500)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=500)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=500)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=500)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=1000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=500)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=500)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=1000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=500)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=500)
View(dens_infmixt)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=2000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=2000)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=2000)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=2000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=2000)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=2000)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(1000, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=2000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=2000)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=2000)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(10000, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=2000)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=2000)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=2000)
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
# vals = seq(101, 250, 1)
# d = rep(0, length(vals))
# for (i in 1:length(x$muhat)){
#   d = d + (1/length(x$muhat)) * dnorm(vals,
#                                       x$muhat,
#                                       sqrt(x$varhat))
# }
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=100)
plot(d$y, type='l')
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=100)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=100)
plt = ggplot()
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample')) +
# geom_line(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density'), lwd = 1.1) +
# geom_point(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density')) +
# geom_line(data=normal, aes(x, pred, color='(Gaussian) Predicted Density'), lwd = 1.1) +
# geom_point(data=normal, aes(x, pred, color='(Gaussian) Predicted Density')) +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Mixture) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(Gaussian) Predicted Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Mixture) Predicted Density" = "darkgreen",
"(Gaussian) Predicted Density" = "red",
"Train Data" = "#999999",
"Test Sample" = "blue"
)) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") +
theme(legend.position="bottom", text = element_text(size = 13))
# scale_x_continuous(breaks=seq(-4,6,1))
if (i == 1) {
plt = plt + ylab("Value")
} else {
plt = plt + ylab(" ")
}
print(plt)
split(dens_infmixt, section)
split(dens_infmixt, dens_infmixt$section)
xs = do.call(rbind,
lapply(split(dens_infmixt, dens_infmixt$section),
function(x) {
x$y
}
))
xs = do.call(rbind,
lapply(split(dens_infmixt, dens_infmixt$section),
function(x) {
x$y
}
))
normal$xs = xs
View(normal)
normal$xs = I(xs)
View(normal)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = vals)
res = res[order(res$y), ]
res
}))
dens_normal$section <- rep(normal$x, each=150)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
res = res[order(res$y), ]
res
}))
dens_normal$section <- rep(normal$x, each=150)
normal$xs = I(xs)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
res = res[order(res$y), ]
res
}))
normal$xs
dens_normal$section <- rep(normal$x, each=150)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
print(d)
res = data.frame(x = x$x - 100*d, y = x$xs)
res = res[order(res$y), ]
res
}))
i = 1
history = data.frame(y = input[i,1:12], x = -11:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:12,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,rep(1, 12),])))
normal = data.frame(y = true[i,, 1],
x = 1:12,
pred = pred_mean_norm[i,,],
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=100)
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res
}))
dens_infmixt$section <- rep(infmixt$x, each=100)
xs = do.call(rbind,
lapply(split(dens_infmixt, dens_infmixt$section),
function(x) {
x$y
}
))
normal$xs = I(xs)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
print(d)
res = data.frame(x = x$x - 100*d, y = x$xs)
res = res[order(res$y), ]
res
}))
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
print(d)
res = data.frame(x = x$x - 100*d, y = x$xs)
print(res)
res = res[order(res$y), ]
res
}))
View(dens_normal)
View(normal)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
res = res[order(res$y), ]
res
}))
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
print('--------')
print(res[1:10])
res = res[order(res$y), ]
res
}))
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
print('--------')
print(res[1:10,])
res = res[order(res$y), ]
res
}))
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 100*d, y = x$xs)
print('--------')
print(res)
res = res[order(res$y), ]
res
}))
as.vector()
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = as.vector(x$x - 100*d),
y = as.vector(x$xs))
print('--------')
print(res)
res = res[order(res$y), ]
res
}))
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = as.vector(x$x - 100*d),
y = as.vector(x$xs))
res = res[order(res$y), ]
res
}))
dens_normal$section <- rep(normal$x, each=150)
library(readr)
library(tidyverse)
library(grid)
library(ggpubr)
library(pBrackets)
library(reticulate)
np <- import("numpy")
# load data
input <- np$load("input.npy")
true <- np$load("true.npy")
pred_mean_infmixt <- np$load("pred_mean_infmixt.npy")
pred_var_infmixt <- np$load("pred_var_infmixt.npy")
pred_mean_norm <- np$load("pred_mean_norm.npy")
pred_var_norm <- np$load("pred_var_norm.npy")
dim(pred_var_infmixt) = c(dim(pred_var_infmixt)[1],
1,
dim(pred_var_infmixt)[2])
i = 1
history = data.frame(y = input[i,1:12], x = -11:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:12,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,rep(1, 12),])))
normal = data.frame(y = true[i,, 1],
x = 1:12,
pred = pred_mean_norm[i,,],
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = c()
for (i in 1:length(x$muhat)){
vals = c(vals, rnorm(100, x$muhat, sqrt(x$varhat)))
}
d = density(vals, n=100)
res = data.frame(x = x$x - 70*d$y, y = d$x)
res = res[order(res$y), ]
res
}))
dens_infmixt$section <- rep(infmixt$x, each=100)
xs = do.call(rbind,
lapply(split(dens_infmixt, dens_infmixt$section),
function(x) {
x$y
}
))
normal$xs = I(xs)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
d = dnorm(x$xs, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = as.vector(x$x - 100*d),
y = as.vector(x$xs))
res = res[order(res$y), ]
res
}))
dens_normal$section <- rep(normal$x, each=100)
# extract true samples for prediction period
# index = input_x[i,,1]+1 # index of current sample (+1 for python)
# index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
# data_sample = full_data[, index]
#
# # plot data
# plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
#   geom_line(lwd = 0.5, alpha = 0.2)
# for (j in 2:90) {
#   plt = plt + geom_line(data=data.frame(x=-3:2,
#                                         y=data_sample[j,]),
#                         aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
# }
# plot prediction
plt = ggplot()
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample')) +
# geom_line(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density'), lwd = 1.1) +
# geom_point(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density')) +
# geom_line(data=normal, aes(x, pred, color='(Gaussian) Predicted Density'), lwd = 1.1) +
# geom_point(data=normal, aes(x, pred, color='(Gaussian) Predicted Density')) +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Mixture) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(Gaussian) Predicted Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Mixture) Predicted Density" = "darkgreen",
"(Gaussian) Predicted Density" = "red",
"Train Data" = "#999999",
"Test Sample" = "blue"
)) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") +
theme(legend.position="bottom", text = element_text(size = 13))
# scale_x_continuous(breaks=seq(-4,6,1))
print(plt)
plt = ggplot()
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample')) +
# geom_line(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density'), lwd = 1.1) +
# geom_point(data=infmixt, aes(x, pred, color='(Mixture) Predicted Density')) +
# geom_line(data=normal, aes(x, pred, color='(Gaussian) Predicted Density'), lwd = 1.1) +
# geom_point(data=normal, aes(x, pred, color='(Gaussian) Predicted Density')) +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section), color="(Mixture) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section), color="(Gaussian) Predicted Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Mixture) Predicted Density" = "darkgreen",
"(Gaussian) Predicted Density" = "red",
"Train Data" = "#999999",
"Test Sample" = "blue"
)) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") +
theme(legend.position="bottom", text = element_text(size = 13))
print(plt)
source("~/Downloads/gluformer/cache/visualize_glucose/plot.R")
ggarrange(plt[[1]], plt[[2]], ncol=2, common.legend = TRUE)
ggarrange(plts[[1]], plts[[2]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_glucose/plot.R")
ggarrange(plts[[1]], plts[[2]], ncol=2, common.legend = TRUE)
ggarrange(plts[[1]], plts[[5]], ncol=2, common.legend = TRUE)
ggarrange(plts[[1]], plts[[9]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_glucose/plot.R")
source("~/Downloads/gluformer/cache/visualize_glucose/plot.R")
ggarrange(plts[[1]], plts[[9]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
source("~/Downloads/gluformer/cache/visualize_glucose/plot.R")
ggarrange(plts[[1]], plts[[9]], ncol=2, common.legend = TRUE, legend="bottom")

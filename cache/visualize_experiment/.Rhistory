infmixt = data.frame(y = true[i,, 1],
x = 1:2,
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.25*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
# plot data
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Our) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(True) Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Our) Predicted Density" = "darkgreen",
"(True) Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue")) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
print(plt)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[1])
print(plts[2])
plts
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
print(plts[[2]])
print(plts[[3]])
infmixt
rowMeans(infmixt$muhat_infmixt)
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
View(infmixt)
for (i in 1:3) {
# past and future / predicted observations
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_norm[i,,]),
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.20*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_line(data=infmixt, aes(x, pred, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Our) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(True) Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Our) Predicted Density" = "darkgreen",
"(True) Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue")) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
}
for (i in 1:3) {
# past and future / predicted observations
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_norm[i,,]),
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.20*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
# plot data
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_line(data=infmixt, aes(x, pred, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Our) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(True) Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Our) Predicted Density" = "darkgreen",
"(True) Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue")) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
plts[[i]] = plt
}
plts = list()
for (i in 1:3) {
# past and future / predicted observations
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
pred = pred_mean_norm[i,,],
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.20*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
# plot data
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_line(data=infmixt, aes(x, pred, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Our) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(True) Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Our) Predicted Density" = "darkgreen",
"(True) Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue")) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
plts[[i]] = plt
}
print(plts[[3]])
library(readr)
library(tidyverse)
library(grid)
library(pBrackets)
library(reticulate)
np <- import("numpy")
# load data
full_data <-  np$load("test_data.npy")
input <- np$load("input_norm.npy")
input_x <- np$load("input_x_norm.npy") * 14
true <- np$load("true_mean_infmixt.npy")
pred_mean_infmixt <- np$load("pred_mean_infmixt.npy")
pred_var_infmixt <- exp(np$load("pred_logvar_infmixt.npy"))
pred_mean_norm <- np$load("pred_mean_norm.npy")
pred_var_norm <- np$load("pred_var_norm.npy")
plts = list()
for (i in 1:3) {
# past and future / predicted observations
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
pred = pred_mean_norm[i,,],
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.20*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
# plot data
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_line(data=infmixt, aes(x, pred, color='(Mixture) Prediction'), lwd = 1.1) +
geom_point(data=infmixt, aes(x, pred), color='black') +
geom_line(data=normal, aes(x, pred, color='(Gaussian) Prediction'), lwd = 1.1) +
geom_point(data=normal, aes(x, pred), color='black') +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Mixture) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(Gaussian) Predicted Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Mixture) Predicted Density" = "darkgreen",
"(Gaussian) Predicted Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue",
"(Mixture) Prediction" = "red",
"(Gaussian) Prediction" = "blue"
)) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
plts[[i]] = plt
}
print(plts[[1]])
library(readr)
library(tidyverse)
library(grid)
library(pBrackets)
library(reticulate)
np <- import("numpy")
# load data
full_data <-  np$load("test_data.npy")
input <- np$load("input_norm.npy")
input_x <- np$load("input_x_norm.npy") * 14
true <- np$load("true_mean_infmixt.npy")
pred_mean_infmixt <- np$load("pred_mean_infmixt.npy")
pred_var_infmixt <- exp(np$load("pred_logvar_infmixt.npy"))
pred_mean_norm <- np$load("pred_mean_norm.npy")
pred_var_norm <- np$load("pred_var_norm.npy")
plts = list()
for (i in 1:3) {
# past and future / predicted observations
history = data.frame(y = input[i,, 1], x = -3:0)
infmixt = data.frame(y = true[i,, 1],
x = 1:2,
pred = rowMeans(pred_mean_infmixt[i,,]),
muhat_infmixt = I(as.matrix(pred_mean_infmixt[i,,])),
varhat_infmixt = I(as.matrix(pred_var_infmixt[i,c(1, 1),])))
normal = data.frame(y = true[i,, 1],
x = 1:2,
pred = pred_mean_norm[i,,],
muhat_norm = I(as.matrix(pred_mean_norm[i,,])))
# infmixt: estimate density across temporal dimension
dens_infmixt <- do.call(rbind, lapply(split(infmixt, infmixt$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = rep(0, length(vals))
for (i in 1:length(x$muhat)){
d = d + (1/length(x$muhat)) * dnorm(vals,
x$muhat,
sqrt(x$varhat))
}
res = data.frame(x = x$x - 0.20*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_infmixt$section <- rep(infmixt$x, each=400)
# normal: estimate density across temporal dimension
dens_normal <- do.call(rbind, lapply(split(normal, normal$x), function(x) {
vals = seq(-.5, 1.495,0.005)
d = dnorm(vals, x$muhat_norm, sqrt(pred_var_norm))
res = data.frame(x = x$x - 0.45*d, y = vals)
res = res[order(res$y), ]
res$type <- rep(c("empirical"), each=400)
res
}))
dens_normal$section <- rep(normal$x, each=400)
# extract true samples for prediction period
index = input_x[i,,1]+1 # index of current sample (+1 for python)
index = c(index, index[length(index)]+c(1,2)) # extend for pred. window
data_sample = full_data[, index]
# plot data
plt = ggplot(data.frame(x=-3:2, y=data_sample[1,]), aes(x, y, color = 'Train Data')) +
geom_line(lwd = 0.5, alpha = 0.2)
for (j in 2:90) {
plt = plt + geom_line(data=data.frame(x=-3:2,
y=data_sample[j,]),
aes(x, y, color='Train Data'), lwd = 0.5, alpha = 0.2)
}
# plot prediction
plt = plt + geom_line(data=rbind(infmixt[, 1:2], history), aes(x, y, color='Test Sample'), lwd = 1.1) +
geom_point(data=rbind(infmixt[, 1:2], history), aes(x, y), color='black') +
geom_line(data=infmixt, aes(x, pred, color='(Mixture) Prediction'), lwd = 1.1) +
geom_point(data=infmixt, aes(x, pred), color='black', alpha = 0.2) +
geom_line(data=normal, aes(x, pred, color='(Gaussian) Prediction'), lwd = 1.1) +
geom_point(data=normal, aes(x, pred), color='black', alpha = 0.2) +
geom_path(data=dens_infmixt, aes(x, y, group=interaction(section,type), color="(Mixture) Predicted Density"), lwd=1, alpha=0.5) +
geom_path(data=dens_normal, aes(x, y, group=interaction(section,type), color="(Gaussian) Predicted Density"), lwd=1, alpha=0.5) +
theme_bw() +
geom_vline(xintercept=c(0,1,2), lty=2) +
scale_colour_manual(name = "", values = c("(Mixture) Predicted Density" = "darkgreen",
"(Gaussian) Predicted Density" = "darkorange",
"Train Data" = "#999999",
"Test Sample" = "darkblue",
"(Mixture) Prediction" = "red",
"(Gaussian) Prediction" = "brown"
)) +
guides(color=guide_legend(nrow=2,byrow=TRUE)) +
xlab("Time") + ylab("Value") +
theme(legend.position="bottom", text = element_text(size = 13)) +
scale_x_continuous(breaks=seq(-4,6,1))
plts[[i]] = plt
}
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
print(plts[[1]])
grid.arrange(plts[[1]], plts[[2]], plts[[3]], ncol=3, common.legend = TRUE, legend="bottom")
install.packages("ggpubr")
install.packages("ggpubr")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[2]], plts[[3]], ncol=3, common.legend = TRUE, legend="bottom")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[2]], plts[[3]], ncol=3, common.legend = TRUE, legend="bottom")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[2]], plts[[3]], ncol=3, common.legend = TRUE, legend="bottom")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[9]], ncol=2, common.legend = TRUE)
ggarrange(plts[[1]], plts[[3]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[3]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[1]], plts[[3]], ncol=2, common.legend = TRUE)
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE)
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE, legend = "bottom")
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE, bottom=TRUE)
source("~/Downloads/gluformer/cache/visualize_experiment/plot.R")
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE, bottom=TRUE)
print(plts[[11]])
ggarrange(plts[[11]], plts[[13]], ncol=2, common.legend = TRUE, legend="bottom")
